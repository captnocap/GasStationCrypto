{"version":3,"sources":["ui/widgets.js","ui/metamaskButton.js","game/engine.js","game/img/wall1.png","game/game.js","pages/aboutPage.js","util/utils.js","util/ethutils.js","ui/loadingRow.js","ui/numberField.js","ui/ifo.js","pages/ifoPage.js","App.js","index.js"],"names":["GreenColor","YellowColor","yellow","ColorButton","withStyles","theme","root","color","borderColor","borderWidth","borderRadius","backgroundColor","Button","ColorStack","switchBase","checked","track","Switch","props","Radio","borderStyle","classes","children","Stack","className","ColorTexField","styled","Link","textDecoration","TextField","borderBottomColor","Provider","Signer","Address","ChainID","MetamaskButton","React","state","setState","isPortrait","useMediaQuery","query","fallback","ethers","providers","JsonRpcProvider","rpc","tryChangeAddChain","a","id","parseInt","toString","window","ethereum","request","method","params","chainId","code","chainName","name","rpcUrls","console","log","getWallet","change","accounts","Web3Provider","getSigner","localStorage","setItem","document","dispatchEvent","Event","handleClick","open","getText","address","substr","length","ellipsize","onChainChange","onAccountChange","on","getItem","hasFocus","isMetaMask","load","onClick","size","variant","radians","degrees","Math","PI","offscreenCanvas","createElement","width","height","getContext","require","networks","abi","dateToString","timestamp","Date","toUTCString","split","error","blockToDate","blockNumber","getBlockNumber","currentBlock","getBlock","block","num","now","past","tpb","interval","finalTimestamp","LoadingRow","ml","mr","direction","alignItems","justifyContent","Typography","label","value","fontWeight","prefix","suffix","Skeleton","NumberField","margin","type","InputProps","endAdornment","InputAdornment","e","setValue","maxValue","position","onChange","parseFloat","target","undefined","ticker","sx","click","addressr","tokenAbi","IFO","ifoState","setIfoState","startBlock","setStartBlock","endBlock","setEndBlock","offering","setOffering","raising","setRaising","raised","setRaised","symbolo","setSymbolo","symbolr","setSymbolr","allocation","setAllocation","claim","setClaim","deposit","setDeposit","maxDeposit","setMaxDeposit","setTimeout","update","setInterval","clearInterval","contract","Contract","tokeno","tokenr","getAmount","alloc","utils","formatEther","symbol","so","sr","raisingAmount","r","offeringAmount","totalAmount","total","hasHarvest","getOfferingAmount","allowance","balanceOf","approve","makeDeposit","t","parseEther","makeClaim","harvest","style","marginTop","marginBottom","src","alt","mb","mt","ifo","align","contracts","gasPrice","gasLimit","url","img","unit","scan","IfoPage","minHeight","App","componentDidMount","createMuiTheme","palette","mode","primary","main","secondary","ThemeProvider","this","CssBaseline","exact","from","to","path","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.05c4f302.chunk.js","sourcesContent":["\r\nimport { Stack, Button, Switch, Radio, withStyles, TextField, styled } from '@material-ui/core';\r\nimport { Link } from \"react-router-dom\";\r\nimport { yellow } from '@material-ui/core/colors';\r\n\r\nexport const GreenColor = \"#00ff7f\"\r\nexport const YellowColor = yellow[400]\r\n\r\nexport const ColorButton = withStyles((theme) => ({\r\n    root: {\r\n        color: \"#FFFFFFFF\",\r\n        borderColor: yellow[400],\r\n        borderWidth: 2,\r\n        borderRadius: 0,\r\n        backgroundColor: \"#FFFFFF00\",\r\n        '&:hover': {\r\n            borderColor: yellow[400],\r\n            borderWidth: 2,\r\n            backgroundColor: \"#FFFFFF11\"\r\n        }\r\n    }\r\n}))(Button)\r\n\r\nexport const ColorSwitch = withStyles({\r\n    switchBase: {\r\n        color: \"#AAAAAAFF\",\r\n        '&$checked': {\r\n            color: \"#FFFFFFFF\"\r\n        },\r\n        '&$checked + $track': {\r\n            backgroundColor: \"#FFFFFFFF\"\r\n        }\r\n    },\r\n    checked: {},\r\n    track: {}\r\n})(Switch);\r\n\r\nexport const ColorRadio = withStyles({\r\n    root: {\r\n      color: yellow[400],\r\n      '&$checked': {\r\n        color: yellow[600],\r\n      },\r\n    },\r\n    checked: {},\r\n})((props) => <Radio color=\"default\" {...props} />);\r\n\r\n  \r\nexport const ColorStack = withStyles({\r\n    root: {\r\n        borderColor: yellow[400],\r\n        borderWidth: 2,\r\n        borderRadius: 0,\r\n        backgroundColor: \"#111111\",\r\n        borderStyle: \"solid\"\r\n    }\r\n})(\r\n    ({ classes, children, ...props }) => <Stack className={classes.root} {...props}>{children}</Stack>\r\n)\r\n\r\nexport const ColorLink = styled(Link)({\r\n    textDecoration: \"inherit\",\r\n    color: \"white\",\r\n    \"&:hover\": { color: yellow[400] }\r\n})\r\n\r\nexport const ColorTexField = styled(TextField)({\r\n    '& label.Mui-focused': {\r\n        color: GreenColor,\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n        borderBottomColor: yellow[400],\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n        '&.Mui-focused fieldset': {\r\n            borderColor: yellow[400],\r\n        },\r\n        '&:hover fieldset': {\r\n            borderColor: yellow[400],\r\n        },\r\n        '& fieldset': {\r\n            borderColor: yellow[400],\r\n        }\r\n    },\r\n})\r\n","import * as React from 'react';\r\nimport { ColorButton } from './widgets.js'\r\nimport \"react-native-get-random-values\"\r\nimport \"@ethersproject/shims\"\r\nimport { ethers } from \"ethers\";\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\nexport var Provider = null\r\nexport var Signer = null\r\nexport var Address = null\r\nexport var ChainID = null\r\n\r\n/**\r\n * props.id = Chain Number\r\n * props.rpc = Fallback RPC\r\n */\r\nexport default function MetamaskButton(props) {\r\n    const [state, setState] = React.useState(\"install\");\r\n    const isPortrait = useMediaQuery({ query: '(orientation: portrait)' })\r\n    const fallback = new ethers.providers.JsonRpcProvider(props.rpc)\r\n\r\n    function ellipsize(address) {\r\n        return address.substr(0, 4) + \"…\" + address.substr(address.length - 4, address.length)\r\n    }\r\n\r\n    const tryChangeAddChain = async () => {\r\n        const id = \"0x\" + parseInt(props.id).toString(16)\r\n        try {\r\n            await window.ethereum.request({ method: 'wallet_switchEthereumChain', params: [{ chainId: id }]})\r\n            return true\r\n        } catch (error) {\r\n            if (error.code === 4902) {\r\n                try {\r\n                    await window.ethereum.request({method: 'wallet_addEthereumChain', params: [{ chainName: props.name, chainId: id, rpcUrls: [props.rpc] }]});\r\n                    return true\r\n                } catch (addError) {\r\n                    console.log(addError)\r\n                }\r\n            }\r\n            return false\r\n        }\r\n    }\r\n\r\n    const getWallet = async (change) => {\r\n        try {\r\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n            Address = accounts[0]\r\n            Provider = new ethers.providers.Web3Provider(window.ethereum)\r\n            Signer = Provider.getSigner()\r\n            ChainID = await window.ethereum.request({ method: 'eth_chainId' })\r\n            if (parseInt(ChainID) !== parseInt(props.id)) {\r\n                setState(\"network\")\r\n                if (change === true) await tryChangeAddChain()\r\n            } else {\r\n                setState(\"ready\")\r\n                window.localStorage.setItem(\"address\", Address)\r\n                document.dispatchEvent(new Event(\"wallet\"))\r\n            }\r\n        } catch(error) {\r\n            Provider = fallback\r\n        }        \r\n    }\r\n\r\n    const handleClick = async () => {\r\n        switch (state) {\r\n            case \"install\": return window.open(\"https://metamask.io\", '_blank')\r\n            default: return await getWallet(true)\r\n        }\r\n    }\r\n\r\n    const getText = () => {\r\n        switch (state) {\r\n            case \"connect\": return \"CONNECT WALLET\"\r\n            case \"install\": return \"INSTALL METAMASK\"\r\n            case \"network\": return \"WRONG NETWORK\"\r\n            case \"ready\": return ellipsize(Address)\r\n            default: return \"Error\"\r\n        }\r\n    }\r\n\r\n    const onChainChange = async (chainId) => {\r\n        document.dispatchEvent(new Event(\"ChainChange\"))\r\n        await getWallet(false)\r\n        // window.location.reload()\r\n    }\r\n\r\n    const onAccountChange = async (accounts) => {\r\n        document.dispatchEvent(new Event(\"AccountChange\"))\r\n        await getWallet(false)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const load = async () => {\r\n            Provider = fallback\r\n            window.ethereum.on(\"accountsChanged\", onAccountChange)        \r\n            window.ethereum.on(\"chainChanged\", onChainChange)\r\n            if (window.localStorage.getItem(\"address\") != null) return await getWallet(document.hasFocus())\r\n            setState(window.ethereum && window.ethereum.isMetaMask ? \"connect\" : \"install\")\r\n        }\r\n        load()\r\n    }, [state])\r\n    \r\n    if (isPortrait) {\r\n        return (<ColorButton {...props} onClick={handleClick} size=\"small\" variant=\"outlined\">{getText()}</ColorButton>);\r\n    } else {\r\n        return (<ColorButton {...props} onClick={handleClick} variant=\"outlined\">{getText()}</ColorButton>);\r\n    }\r\n    \r\n}","const QUAD_1_LIMIT = radians(90);\r\nconst QUAD_2_LIMIT = radians(180);\r\nconst QUAD_3_LIMIT = radians(270);\r\nconst QUAD_4_LIMIT = radians(360);\r\nconst FIELD_OF_VIEW = radians(70);\r\nconst CELL_SIZE = 64;\r\nconst MIN_WALL_DISTANCE = 15.0;\r\nconst MAX_SPEED = 5.0;\r\nconst ACCEL = 0.2;\r\nconst DECEL = 0.1;\r\nconst MAX_TURN_SPEED = radians(2);\r\nconst TURN_ACCEL = radians(0.2);\r\nconst GAME_TICKS_PER_SECOND = 60;\r\nconst ANIMATION_DELAY = 1000 / GAME_TICKS_PER_SECOND;\r\nconst CACHE_WARMING_TIME = 5000;\r\n\r\nfunction radians(degrees) {\r\n    return degrees * (Math.PI / 180);\r\n};\r\n\r\nfunction normaliseAngle(radians) {\r\n    radians = radians % QUAD_4_LIMIT;\r\n    while (radians < 0) {\r\n        radians += QUAD_4_LIMIT;\r\n    }\r\n    return radians;\r\n}\r\n\r\nexport class Raycaster {\r\n    constructor(canvas, map) {\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.imageSmoothingEnabled = false;\r\n        ctx.msImageSmoothingEnabled = false;\r\n\r\n        const distanceToProjectionPlane = (canvas.width / 2) / Math.tan(FIELD_OF_VIEW / 2);\r\n        const imageData = ctx.createImageData(canvas.width, canvas.height);\r\n\r\n        const display = {\r\n            ctx,\r\n            canvas,\r\n            imageData,\r\n            width: canvas.width,\r\n            height: canvas.height,\r\n            distanceToProjectionPlane,\r\n            rayAngles: []\r\n        };\r\n\r\n        for (let sx = 0; sx < canvas.width; sx++) {\r\n            const rayAngle = normaliseAngle(Math.atan((sx - canvas.width / 2) / distanceToProjectionPlane));\r\n            display.rayAngles.push(rayAngle);\r\n        }\r\n\r\n        const world = new World(map.walls, map.floors, map.ceilings);         \r\n        const player = new Player(map.startX, map.startY, map.initialHeading, world);\r\n        const gameState = new GameState(player);\r\n        for (const sprite of map.sprites) {\r\n            gameState.addGameElement(sprite);\r\n        }\r\n\r\n        this._display = display;\r\n        this._imageLoader = new ImageLoader(map.images);\r\n        this._world = world;\r\n        this._gameState = gameState;\r\n        this._player = player;\r\n    }\r\n    \r\n    fullScreen() {\r\n        let canvas = this._display.canvas;\r\n        if (canvas.requestFullscreen) {\r\n            canvas.requestFullscreen();\r\n        } else if (canvas.mozRequestFullScreen) {\r\n            canvas.mozRequestFullScreen();\r\n        } else if (canvas.webkitRequestFullscreen) {\r\n            canvas.webkitRequestFullscreen();\r\n        } else if (canvas.msRequestFullscreen) {\r\n            canvas.msRequestFullscreen();\r\n        }\r\n    }\r\n    \r\n    run() {\r\n        this._display.ctx.font = \"bold 20px monospace\";\r\n        this._display.ctx.fillStyle = \"green\";\r\n        this._display.ctx.fillText(\"Loading...\", 10, 50);\r\n        this._gameState.start();        \r\n        window.requestAnimationFrame(this._render.bind(this));\r\n    }\r\n    \r\n    _render(timestamp) {\r\n        window.requestAnimationFrame(this._render.bind(this));\r\n\r\n        if (!this._imageLoader.allLoaded) {\r\n            return;\r\n        }\r\n        \r\n        this._drawFloorsAndCeilings();\r\n        const wallDistances = this._drawWalls();\r\n        this._drawSprites(wallDistances);\r\n        this._gameState.update(timestamp);\r\n    }\r\n    \r\n    _drawFloorsAndCeilings() {\r\n        const imageData = this._display.imageData;\r\n        const startRayAngle = normaliseAngle(this._player.heading + this._display.rayAngles[0]);\r\n        const relativeRayAngle = this._player.heading - startRayAngle;\r\n        const endRayAngle = normaliseAngle(this._player.heading + this._display.rayAngles[this._display.width - 1]);\r\n\r\n        for (let sy = 0; sy < this._display.height / 2; sy++) {\r\n            const lineHeight = ((this._display.height / 2) - sy) * 2;\r\n            const rayLength = ((CELL_SIZE / lineHeight) / Math.cos(relativeRayAngle)) * this._display.distanceToProjectionPlane;\r\n            let worldX = this._player.x + (rayLength * Math.sin(startRayAngle));\r\n            let worldY = this._player.y - (rayLength * Math.cos(startRayAngle));\r\n            const endWorldX = this._player.x + (rayLength * Math.sin(endRayAngle));\r\n            const endWorldY = this._player.y - (rayLength * Math.cos(endRayAngle));\r\n            const dx = (endWorldX - worldX) / this._display.width;\r\n            const dy = (endWorldY - worldY) / this._display.width;\r\n            \r\n            for (let sx = 0; sx < this._display.width; sx++) {\r\n                if (!this._world.isInWorld(worldX, worldY)) {\r\n                    worldX += dx;\r\n                    worldY += dy;\r\n                    continue;\r\n                }\r\n                const tx = Math.floor(worldX) % CELL_SIZE;\r\n                const ty = Math.floor(worldY) % CELL_SIZE;\r\n                const cellX = Math.floor(worldX / CELL_SIZE);\r\n                const cellY = Math.floor(worldY / CELL_SIZE);\r\n                const floorTexture = this._imageLoader.images[this._world.floors[cellY][cellX] - 1];\r\n                const ceilingTexture = this._imageLoader.images[this._world.ceilings[cellY][cellX] - 1];\r\n                const txOffset = (ty * CELL_SIZE + tx) * 4;\r\n                let offset = (sy * this._display.width + sx) * 4;\r\n\r\n                var alpha = 1 - (rayLength / 600);\r\n                if (alpha < 0) alpha = 0\r\n                if (alpha > 1) alpha = 1\r\n\r\n                imageData.data[offset] = ceilingTexture.imageData.data[txOffset] * alpha;\r\n                imageData.data[offset + 1] = ceilingTexture.imageData.data[txOffset + 1] * alpha;\r\n                imageData.data[offset + 2] = ceilingTexture.imageData.data[txOffset + 2] * alpha;\r\n                imageData.data[offset + 3] = 255;\r\n                offset = ((this._display.height - sy - 1) * this._display.width + sx) * 4;\r\n                imageData.data[offset] = floorTexture.imageData.data[txOffset] * alpha;\r\n                imageData.data[offset + 1] = floorTexture.imageData.data[txOffset + 1] * alpha;\r\n                imageData.data[offset + 2] = floorTexture.imageData.data[txOffset + 2] * alpha;\r\n                imageData.data[offset + 3] = 255;\r\n                worldX += dx;\r\n                worldY += dy;\r\n            }\r\n        }\r\n\r\n        if (!this._gameState.warmingCache) {\r\n            this._display.ctx.putImageData(imageData, 0, 0);\r\n        }\r\n    }\r\n\r\n    _drawWalls() {\r\n        const wallDistances = [];\r\n        for (let sx = 0; sx < this._display.width; sx++) {\r\n            const rayAngle = normaliseAngle(this._player.heading + this._display.rayAngles[sx]);\r\n            const relativeRayAngle = normaliseAngle(this._player.heading - rayAngle);\r\n            const north = rayAngle <= QUAD_1_LIMIT || rayAngle >= QUAD_3_LIMIT;\r\n            const west = rayAngle >= QUAD_2_LIMIT;\r\n\r\n            let dy = north ? -(this._player.y % CELL_SIZE) : (CELL_SIZE - (this._player.y % CELL_SIZE));\r\n            let dx = dy * Math.tan(rayAngle);\r\n            const hRay = {\r\n                x: this._player.x - dx,\r\n                y: this._player.y + dy\r\n            };\r\n            dy = north ? -CELL_SIZE : CELL_SIZE;\r\n            dx = dy * Math.tan(rayAngle);\r\n            hRay.cellX = this._world.cell(hRay.x);\r\n            hRay.cellY = this._world.cell(hRay.y);\r\n            if (north) {\r\n                hRay.cellY--;\r\n            }\r\n\r\n            while (this._world.isCellInWorld(hRay.cellX, hRay.cellY) && this._world.walls[hRay.cellY][hRay.cellX] === 0) {\r\n                hRay.x -= dx;\r\n                hRay.y += dy;\r\n                hRay.cellX = this._world.cell(hRay.x);\r\n                hRay.cellY = this._world.cell(hRay.y);\r\n                if (north) {\r\n                    hRay.cellY--;\r\n                }\r\n            }\r\n\r\n            hRay.length = Math.sqrt(Math.pow((hRay.x - this._player.x), 2) + Math.pow((hRay.y - this._player.y), 2));\r\n            \r\n            dx = west ? -(this._player.x % CELL_SIZE) : (CELL_SIZE - (this._player.x % CELL_SIZE));\r\n            dy = dx / Math.tan(rayAngle);\r\n            const vRay = {\r\n                x: this._player.x + dx,\r\n                y: this._player.y - dy\r\n            };\r\n            dx = west ? -CELL_SIZE : CELL_SIZE;\r\n            dy = dx / Math.tan(rayAngle);\r\n            vRay.cellX = this._world.cell(vRay.x);\r\n            vRay.cellY = this._world.cell(vRay.y);\r\n            if (west) {\r\n                vRay.cellX--;\r\n            }\r\n\r\n            while (this._world.isCellInWorld(vRay.cellX, vRay.cellY) && this._world.walls[vRay.cellY][vRay.cellX] === 0) {\r\n                vRay.x += dx;\r\n                vRay.y -= dy;\r\n                vRay.cellX = this._world.cell(vRay.x);\r\n                vRay.cellY = this._world.cell(vRay.y);\r\n                if (west) {\r\n                    vRay.cellX--;\r\n                }\r\n            }\r\n\r\n            vRay.length = Math.sqrt(Math.pow((vRay.x - this._player.x), 2) + Math.pow((vRay.y - this._player.y), 2));\r\n\r\n            let rayLength;\r\n            let tx;\r\n            let texture;\r\n            if (vRay.length < hRay.length) {\r\n                rayLength = vRay.length;\r\n                tx = Math.floor(vRay.y % CELL_SIZE);\r\n                if (west) {\r\n                    tx = CELL_SIZE - tx - 1;\r\n                }\r\n                texture = this._imageLoader.images[this._world.walls[vRay.cellY][vRay.cellX] - 1].image;\r\n            } else {\r\n                rayLength = hRay.length;\r\n                tx = Math.floor(hRay.x % CELL_SIZE);\r\n                if (!north) {\r\n                    tx = CELL_SIZE - tx - 1;\r\n                }\r\n                texture = this._imageLoader.images[this._world.walls[hRay.cellY][hRay.cellX] - 1].image;\r\n            }\r\n\r\n            const perpRayLength = rayLength * Math.cos(relativeRayAngle);\r\n            const lineHeight = (CELL_SIZE / perpRayLength) * this._display.distanceToProjectionPlane;\r\n            const wallTop = Math.floor((this._display.height - lineHeight) / 2);\r\n            wallDistances.push(perpRayLength);\r\n  \r\n            if (!this._gameState.warmingCache) {\r\n                this._display.ctx.drawImage(texture, tx, 0, 1, CELL_SIZE, sx, wallTop, 1, lineHeight);\r\n                \r\n                var alpha = perpRayLength / 600;\r\n                if (alpha < 0) alpha = 0\r\n                if (alpha > 1) alpha = 1\r\n                this._display.ctx.fillStyle = \"rgba(0, 0, 0, \" + alpha + \")\";\r\n                this._display.ctx.fillRect(sx, wallTop, 1, lineHeight);\r\n            }            \r\n        }\r\n        return wallDistances;\r\n    }\r\n\r\n    _drawSprites(wallDistances) {\r\n        const furthestWall = Math.max(...wallDistances);\r\n        const sprites = this._gameState.sprites;\r\n        const visibleSprites = []\r\n\r\n        for (const sprite of sprites) {\r\n            const dx = sprite.x - this._player.x;\r\n            const dy = this._player.y - sprite.y;\r\n            const angle = normaliseAngle(Math.atan2(dx, dy) - this._player.heading);\r\n            if (!(angle >= QUAD_1_LIMIT && angle <= QUAD_3_LIMIT)) {\r\n                const distance = Math.sqrt(Math.pow((sprite.x - this._player.x), 2) + Math.pow((this._player.y - sprite.y), 2)) * Math.cos(angle);\r\n                if (distance < furthestWall) {\r\n                    visibleSprites.push({sprite, angle, distance});\r\n                }\r\n            }\r\n        }\r\n        \r\n        visibleSprites.sort((a, b) => b.distance - a.distance);\r\n        \r\n        for (const s of visibleSprites) {\r\n            const sprite = s.sprite;\r\n            const distance = s.distance;\r\n            const angle = s.angle;\r\n            const image = this._imageLoader.images[sprite.image].image;\r\n            const height = Math.round((image.height / distance) * this._display.distanceToProjectionPlane);\r\n            const scale = image.height / height;\r\n            const width = image.width / scale;\r\n            const sx = Math.round(Math.tan(angle) * this._display.distanceToProjectionPlane + (this._display.width / 2) - width / 2);\r\n            const sy = Math.round((this._display.height - height) / 2);\r\n            for (let x = sx; x < sx + width; x++) {\r\n                if (x < 0 || x > this._display.width - 1) {\r\n                    continue;\r\n                }\r\n                if (distance < wallDistances[x]) {\r\n                    let tx = Math.round((x - sx) * scale);\r\n                    if (!this._gameState.warmingCache) {\r\n                        // var alpha = 1 - (distance / 600);\r\n                        // if (alpha < 0) alpha = 0\r\n                        // this._display.ctx.save()\r\n                        // this._display.ctx.filter = \"brightness(\" + alpha + \")\";\r\n                        // this._display.ctx.drawImage(image, tx, 0, 1, image.height, x, sy, 1, height);\r\n                        // this._display.ctx.restore()\r\n\r\n                        context.clearRect(0, 0, image.width, image.height)\r\n                        context.drawImage(image, 0, 0);\r\n                        const imageData = context.getImageData(0, 0, image.width, image.height);\r\n                        const alpha = 1 - (distance / 600)\r\n                        for(var i = 0; i < imageData.data.length; i += 4) {\r\n                            imageData.data[i] = alpha * imageData.data[i];\r\n                            imageData.data[i + 1] = alpha * imageData.data[i + 1];\r\n                            imageData.data[i + 2] =  alpha * imageData.data[i + 2];\r\n                        }\r\n                        context.putImageData(imageData, 0, 0)\r\n                        this._display.ctx.drawImage(offscreenCanvas, tx, 0, 1, image.height, x, sy, 1, height)\r\n\r\n                        // context.clearRect(0, 0, image.width, image.height)\r\n                        // context.globalCompositeOperation = \"source-over\"\r\n                        // context.drawImage(image, 0, 0);\r\n                        // const alpha = (1 - (distance / 600)) * 255;\r\n                        // context.globalCompositeOperation = \"multiply\"\r\n                        // context.fillStyle = \"rgb(\" + alpha + \", \" + alpha + \", \" + alpha + \")\";\r\n                        // context.fillRect(0, 0, image.width, image.height);\r\n                        // context.globalCompositeOperation = \"destination-in\"\r\n                        // context.drawImage(image, 0, 0);\r\n                        // this._display.ctx.drawImage(offscreenCanvas, tx, 0, 1, image.height, x, sy, 1, height);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nconst offscreenCanvas = document.createElement('canvas');\r\noffscreenCanvas.width = 28;\r\noffscreenCanvas.height = 64;\r\nconst context = offscreenCanvas.getContext('2d');\r\n\r\nclass World {\r\n    constructor(walls, floors, ceilings) {\r\n        this.walls = walls;\r\n        this.floors = floors;\r\n        this.ceilings = ceilings;\r\n        this.horizontalCells = walls[0].length;\r\n        this.verticalCells = walls.length;\r\n        this.width = walls[0].length * CELL_SIZE;\r\n        this.height = walls.length * CELL_SIZE;\r\n    }\r\n\r\n    isInWorld(x, y) {\r\n        return x >= 0 && y >= 0 && x < this.width && y < this.height;\r\n    }\r\n    \r\n    isCellInWorld(cellX, cellY) {\r\n        return cellX >= 0 && cellY >= 0 && cellX < this.horizontalCells && cellY < this.verticalCells;\r\n    }\r\n\r\n    cell(worldX) {\r\n        return Math.floor(worldX / CELL_SIZE);\r\n    }\r\n}\r\n\r\nclass ImageLoader {    \r\n    constructor(uris) {\r\n        this.images = [];\r\n        for (const uri of uris) {\r\n            const image = {\r\n                loaded: false,\r\n                image: new Image()\r\n            };\r\n            image.image.onload = function() {\r\n                const canvas = document.createElement('canvas');\r\n                const ctx = canvas.getContext(\"2d\");\r\n                ctx.drawImage(image.image, 0, 0);\r\n                image.imageData = ctx.getImageData(0, 0, image.image.width, image.image.height);\r\n                image.loaded = true;\r\n            }\r\n            image.image.src = uri;\r\n            this.images.push(image);\r\n        }\r\n    }\r\n\r\n    get allLoaded() {\r\n        return this.images.every(t => t.loaded)\r\n    }\r\n}\r\n\r\n\r\nclass KeyTracker {\r\n    constructor() {\r\n        this.forward = false;\r\n        this.backward = false;\r\n        this.left = false;\r\n        this.right = false;\r\n\r\n        let keydown = function (event) {\r\n            event.preventDefault();\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                case \"Left\":\r\n                    this.left = true;\r\n                    break;\r\n                case \"ArrowRight\":\r\n                case \"Right\":\r\n                    this.right = true;\r\n                    break;\r\n                case \"ArrowUp\":\r\n                case \"Up\":\r\n                    this.forward = true;\r\n                    break;\r\n                case \"ArrowDown\":\r\n                case \"Down\":\r\n                    this.backward = true;\r\n                    break;\r\n            }\r\n        };\r\n\r\n        let keyup = function (event) {\r\n            event.preventDefault();\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                case \"Left\":\r\n                    this.left = false;\r\n                    break;\r\n                case \"ArrowRight\":\r\n                case \"Right\":\r\n                    this.right = false;\r\n                    break;\r\n                case \"ArrowUp\":\r\n                case \"Up\":\r\n                    this.forward = false;\r\n                    break;\r\n                case \"ArrowDown\":\r\n                case \"Down\":\r\n                    this.backward = false;\r\n                    break;\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"keydown\", keydown.bind(this));\r\n        window.addEventListener(\"keyup\", keyup.bind(this));\r\n    }\r\n}\r\n\r\nclass GameState {\r\n    constructor(player) {\r\n        this._player = player;\r\n        this._gameElements = [];\r\n        this.addGameElement(player);\r\n    }\r\n    \r\n    start() {\r\n        this.warmingCache = true;\r\n        this._cacheWarmingTimeout = new Date().getTime() + CACHE_WARMING_TIME;\r\n    }\r\n\r\n    update(timestamp) {\r\n        let ticks;\r\n        if (this._lastRun === undefined) {\r\n            ticks = 1;\r\n        } else {\r\n            const delta = timestamp - this._lastRun;\r\n            ticks = delta / ANIMATION_DELAY;\r\n        }\r\n        this._lastRun = timestamp;\r\n        for (const element of this._gameElements) {\r\n            if (element.animate) {\r\n                element.animate(ticks);\r\n            }\r\n        }\r\n        if (this.warmingCache) {\r\n            this._player.keys.forward = true;\r\n            this._player.keys.left = true;\r\n            const now = new Date().getTime();\r\n            if (now > this._cacheWarmingTimeout) {\r\n                this.warmingCache = false;\r\n                this._player.keys.forward = false;\r\n                this._player.keys.left = false;\r\n                for (const element of this._gameElements) {\r\n                    if (element.reset) {\r\n                        element.reset();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addGameElement(element) {\r\n        this._gameElements.push(element);\r\n    }\r\n\r\n    get sprites() {\r\n        return this._gameElements.filter(element => element.image);\r\n    }\r\n}\r\n\r\nclass Projectile {\r\n    constructor(x, y, heading, speed, world) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.heading = heading;\r\n        this._speed = speed;\r\n        this._world = world;\r\n        this._initialX = x;\r\n        this._initialY = y;\r\n        this._initialHeading = heading;\r\n        this._initialSpeed = speed;\r\n    }\r\n\r\n    animate(ticks) {\r\n        const dx = Math.sin(this.heading);\r\n        const dy = Math.cos(this.heading);\r\n        let speed = this._speed * ticks;\r\n        if (Math.abs(speed) > MIN_WALL_DISTANCE) {\r\n            speed = speed > 0 ? MIN_WALL_DISTANCE : -MIN_WALL_DISTANCE;\r\n        }\r\n        const wallCheck = speed > 0 ? MIN_WALL_DISTANCE : speed < 0 ? -MIN_WALL_DISTANCE : 0;\r\n        if (this._world.walls[this._world.cell(this.y)][this._world.cell(this.x + dx * wallCheck)] === 0) {\r\n            this.x += dx * speed;\r\n        }\r\n        if (this._world.walls[this._world.cell(this.y - dy * wallCheck)][this._world.cell(this.x)] === 0) {\r\n            this.y -= dy * speed;\r\n        }\r\n    }\r\n    \r\n    reset() {\r\n        this.x = this._initialX;\r\n        this.y = this._initialY;\r\n        this.heading = this._initialHeading;\r\n        this._speed = this._initialSpeed;\r\n    }\r\n}\r\n\r\nclass Player extends Projectile {\r\n    constructor(x, y, heading, world) {\r\n        super(x, y, heading, 0.0, world);\r\n        this._turnSpeed = 0.0;\r\n        this._world = world;\r\n        this.keys = new KeyTracker();\r\n    }\r\n    \r\n    animate(ticks) {\r\n        super.animate(ticks);\r\n        \r\n        const turnSpeed = this._turnSpeed * ticks;\r\n        const turnAccel = TURN_ACCEL * ticks;\r\n        const accel = ACCEL * ticks;\r\n        const decel = DECEL * ticks;\r\n        \r\n        if (this.keys.forward) {\r\n            if (this._speed < 0.0) {\r\n                this._speed = 0.0;\r\n            }\r\n            if (this._speed <= MAX_SPEED) {\r\n                this._speed += accel;\r\n            }\r\n        } else if (this.keys.backward) {\r\n            if (this._speed > 0.0) {\r\n                this._speed = 0.0;\r\n            }\r\n            if (Math.abs(this._speed) <= MAX_SPEED) {\r\n                this._speed -= accel;\r\n            }\r\n        } else {\r\n            if (this._speed > 0.0) {\r\n                this._speed -= decel;\r\n                if (this._speed < 0.0) {\r\n                    this._speed = 0.0;\r\n                }\r\n            } else if (this._speed < 0.0) {\r\n                this._speed += decel;\r\n                if (this._speed > 0.0) {\r\n                    this._speed = 0.0;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.heading = normaliseAngle(this.heading + turnSpeed);\r\n\r\n        if (this.keys.left) {\r\n            if (Math.abs(this._turnSpeed) < MAX_TURN_SPEED) {\r\n                this._turnSpeed -= turnAccel;\r\n            }\r\n        } else if (this._turnSpeed < 0.0) {\r\n            this._turnSpeed = 0.0;\r\n        }\r\n\r\n        if (this.keys.right) {\r\n            if (this._turnSpeed < MAX_TURN_SPEED) {\r\n                this._turnSpeed += turnAccel;\r\n            }\r\n        } else if (this._turnSpeed > 0.0) {\r\n            this._turnSpeed = 0.0;\r\n        }\r\n    }\r\n    \r\n    reset() {\r\n        super.reset();\r\n        this._turnSpeed = 0.0;\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/wall1.a8f840bb.png\";","import { Raycaster } from './engine.js'\r\n\r\nimport Wall1 from './img/wall1.png';\r\nimport Wall2 from './img/wall2.png';\r\nimport Floor1 from './img/floor3.png';\r\nimport Floor2 from './img/floor2.png';\r\nimport Ceiling1 from './img/ceiling1.png';\r\nimport Ceiling2 from './img/ceiling2.png';\r\nimport Tree from './img/tree.png';\r\nimport Pentagram from './img/eye.png';\r\nimport Pumpkin from './img/pumpkin.png'\r\n\r\n\r\nconst world = {\r\n    startX: 322,\r\n    startY: 928,\r\n    initialHeading: Math.PI / 2,\r\n    images: [\r\n        Wall1,\r\n        Wall2,\r\n        Floor1,\r\n        Floor2,\r\n        Ceiling1,\r\n        Ceiling2,\r\n        Tree,\r\n        Pentagram,\r\n        Pumpkin\r\n    ],\r\n    walls: [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],\r\n        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],\r\n        [0, 2, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],\r\n        [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2],\r\n        [0, 2, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2],\r\n        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 2, 1, 1, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0, 1, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0, 1, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 1, 0]\r\n    ],\r\n    floors: [\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3],\r\n        [3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n        [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\r\n    ],\r\n    ceilings: [\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\r\n        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\r\n    ],\r\n    sprites: [\r\n        {\r\n            image: 6,\r\n            x: 544,\r\n            y: 864\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 480,\r\n            y: 864\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 416,\r\n            y: 864\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 544,\r\n            y: 992\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 480,\r\n            y: 992\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 416,\r\n            y: 992\r\n        },\r\n        {\r\n            image: 7,\r\n            x: 864,\r\n            y: 928\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 800,\r\n            y: 1056\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 928,\r\n            y: 1056\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 928,\r\n            y: 800\r\n        },\r\n        {\r\n            image: 8,\r\n            x: 1938,\r\n            y: 1568\r\n        },\r\n        {\r\n            image: 8,\r\n            x: 1938,\r\n            y: 1600\r\n        },\r\n        {\r\n            image: 8,\r\n            x: 1938,\r\n            y: 1632\r\n        },\r\n        {\r\n            image: 8,\r\n            x: 1248,\r\n            y: 160\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 1536,\r\n            y: 288\r\n        },\r\n        {\r\n            image: 8,\r\n            x: 1536,\r\n            y: 352\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 1536,\r\n            y: 416\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 2272,\r\n            y: 736\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 2272,\r\n            y: 800\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 2272,\r\n            y: 864\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 2272,\r\n            y: 928\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 2208,\r\n            y: 768\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 2208,\r\n            y: 832\r\n        },\r\n        {\r\n            image: 8,\r\n            x: 2208,\r\n            y: 896\r\n        },\r\n        {\r\n            image: 6,\r\n            x: 1440,\r\n            y: 544\r\n        },\r\n    ]\r\n};\r\n\r\nvar raycaster = null\r\n\r\nexport function gameStart() {\r\n    const canvas = document.querySelector(\"#raycaster\")\r\n    if (raycaster === null) {\r\n        raycaster = new Raycaster(canvas, world)\r\n        raycaster.run()\r\n    }\r\n}","import * as React from 'react';\r\nimport { Stack, Typography } from '@material-ui/core';\r\nimport { ColorStack, GreenColor, YellowColor, ColorLink } from '../ui/widgets.js';\r\nimport { Link } from 'react-router-dom';\r\nimport MetamaskButton from '../ui/metamaskButton.js';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport PartnerMenu from '../ui/partnerMenu.js';\r\nimport ChainMenu from '../ui/chainMenu.js';\r\nimport { Raycaster } from '../game/engine.js';\r\nimport { gameStart } from '../game/game.js';\r\n\r\nconst contracts = [\r\n    // {\r\n    //     address: require('../contracts/VoteMaster.json').networks[137].address,\r\n    //     abi: require('../contracts/VoteMaster.json').abi,\r\n    //     gasPrice: 1000000000,\r\n    //     gasLimit: null,\r\n    //     id: 137,\r\n    //     name: \"Polygon\",\r\n    //     url: \"/polygon\",\r\n    //     img: \"polygon-logo.svg\",\r\n    //     unit: \"MATIC\",\r\n    //     scan: \"https://polygonscan.com/address/\" + require('../contracts/VoteMaster.json').networks[137].address,\r\n    //     rpc: \"https://rpc-mainnet.matic.network\"\r\n    // },\r\n    // {\r\n    //     address: require('../contracts/VoteMaster.json').networks[56].address,\r\n    //     abi: require('../contracts/VoteMaster.json').abi,\r\n    //     gasPrice: 5000000000,\r\n    //     gasLimit: null,\r\n    //     id: 56,\r\n    //     name: \"BSC\",\r\n    //     url: \"/bsc\",\r\n    //     img: \"binance-logo.svg\",\r\n    //     unit: \"BNB\",\r\n    //     scan: \"https://bscscan.com/address/\" + require('../contracts/VoteMaster.json').networks[56].address,\r\n    //     rpc: \"https://bsc-dataseed.binance.org\"\r\n    // },\r\n    {\r\n        address: require('../contracts/EtherMite.json').networks[5777].address,\r\n        abi: require('../contracts/EtherMite.json').abi,\r\n        gasPrice: 10000000000,\r\n        gasLimit: 2000000,\r\n        id: 1337,\r\n        name: \"Localhost\",\r\n        url: \"/local\",\r\n        img: \"logo192.png\",\r\n        unit: \"ETH\",\r\n        scan: \"NO\"\r\n    },\r\n]\r\n\r\nexport default function AboutPage(props) {\r\n    const isPortrait = useMediaQuery({ query: '(orientation: portrait)' })\r\n    \r\n    React.useEffect(() => {\r\n\r\n    })\r\n\r\n    const topMenu = () => {\r\n        return (\r\n            <Stack width=\"70%\" direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={4} p={1}>\r\n                <PartnerMenu/>\r\n                <Link to=\"/\" style={{ color: 'inherit', textDecoration: 'inherit'}}>\r\n                    <Stack direction=\"row\">     \r\n                        <Typography color={GreenColor} variant={isPortrait ? \"h4\" : \"h3\"}>Ether</Typography>\r\n                        <Typography color={YellowColor} variant={isPortrait ? \"h4\" : \"h3\"}>{\"&\"}</Typography>\r\n                        <Typography color={GreenColor} variant={isPortrait ? \"h4\" : \"h3\"}>Mites</Typography>\r\n                    </Stack>\r\n                </Link>\r\n                <Stack direction=\"row\" spacing={0}>\r\n                    <ChainMenu items={contracts} id={props.id}/>\r\n                    <MetamaskButton name={contracts[parseInt(props.id)].name} id={contracts[parseInt(props.id)].id} rpc={contracts[parseInt(props.id)].rpc}/>\r\n                </Stack>\r\n            </Stack>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Stack backgroundColor=\"#191919\" minHeight=\"100%\" direction=\"column\" alignItems=\"center\" justifyContent=\"flex-start\">\r\n            {topMenu()}\r\n        </Stack>\r\n    );\r\n}","export function randomInterval(min, max) {\r\n    return Math.random() * (max - min + 1) + min;\r\n}\r\n\r\nexport function toFixed(value, dp){\r\n    return +parseFloat(value).toFixed(dp);\r\n}\r\n\r\nexport function dateToString(timestamp) {\r\n    try {\r\n        const date = new Date(timestamp)\r\n        const string = date.toUTCString()\r\n        return string.split(\", \")[1].split(\" G\")[0] + \" UTC\"\r\n    } catch (error) {\r\n        return \"Invalid date\"\r\n    }\r\n}\r\n","import { Provider } from '../ui/metamaskButton.js';\r\nimport { dateToString } from \"./utils.js\";\r\n\r\nexport async function blockToDate(blockNumber) {\r\n\r\n    try {\r\n        const currentBlock = await Provider.getBlockNumber()\r\n\r\n        if (currentBlock > blockNumber) {\r\n            const block = await Provider.getBlock(blockNumber)\r\n            return dateToString(block.timestamp * 1000)\r\n        } else {\r\n            const num = 1000\r\n            const now = (await Provider.getBlock(currentBlock)).timestamp\r\n            const past = (await Provider.getBlock(currentBlock - num)).timestamp\r\n            const tpb = (now - past) / num * 1000\r\n            const interval = blockNumber - currentBlock\r\n            const finalTimestamp = Date.now() + (interval * tpb)\r\n            return dateToString(finalTimestamp)\r\n        }\r\n    } catch (error) {\r\n        return \"Undefined\"\r\n    }\r\n}\r\n","import { Stack, Typography, Skeleton } from \"@material-ui/core\";\r\n\r\n\r\n// Props: Label, Value | Optional Suffix, Prefix\r\nexport function LoadingRow(props) {\r\n    return (\r\n        <Stack ml=\"8px\" mr=\"8px\" direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n            <Typography color=\"#DDDDDD\" variant=\"body2\">{props.label}</Typography>\r\n            {props.value !== null ? \r\n                <Typography fontWeight={700} variant=\"body2\">{props.prefix}{props.value}{props.suffix}</Typography> : \r\n                <Skeleton variant=\"rect\" width={100} height={16}/>}\r\n        </Stack>\r\n    )\r\n}","import { Stack, InputAdornment } from \"@material-ui/core\";\r\nimport { ColorTexField, ColorButton } from \"./widgets\";\r\n\r\n\r\n// Props: value, setValue, maxValue, click, label\r\nexport function NumberField(props) {\r\n    return (\r\n        <Stack margin=\"8px\" direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n            <ColorTexField\r\n                type=\"number\"\r\n                InputProps={{\r\n                    endAdornment: <InputAdornment onClick={(e) => {props.setValue(props.maxValue)}} position=\"end\">MAX</InputAdornment>\r\n                }}\r\n                value={props.value}\r\n                onChange={(e) => {props.setValue(parseFloat(e.target.value))}}\r\n                id=\"standard-basic\"\r\n                label={props.ticker === undefined ? \"Amount\" : props.ticker}\r\n                variant=\"outlined\"\r\n                sx={{mr: \"8px\"}}\r\n            />\r\n            <ColorButton onClick={props.click} size=\"small\" variant=\"outlined\">{props.label}</ColorButton>\r\n        </Stack>\r\n    )\r\n}","import * as React from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport { Typography, Skeleton, Stack } from '@material-ui/core';\r\nimport { ChainID, Provider, Signer, Address } from './metamaskButton.js';\r\nimport { ColorButton, ColorStack } from './widgets.js';\r\nimport { blockToDate } from '../util/ethutils.js';\r\nimport { LoadingRow } from './loadingRow.js';\r\nimport { NumberField } from './numberField.js';\r\n\r\nconst chain = 5777\r\n// const address = require('../contracts/IFO.json').networks[chain].address\r\n// const addressr = require('../contracts/BUSD.json').networks[chain].address\r\n// const addresso = require('../contracts/PART.json').networks[chain].address\r\nconst address = \"0x625e5b02734378402bb20e69dc8ca151b9d97970\"\r\nconst addressr = \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\"\r\nconst addresso = \"0x840b5fc8c6dee2b1140174a3abdc215190426ccf\"\r\nconst abi = require('../contracts/IFO.json').abi\r\nconst tokenAbi = require('../contracts/BUSD.json').abi\r\n\r\nexport default function IFO(props) {\r\n\r\n    const [state, setState] = React.useState(\"null\")\r\n    const [ifoState, setIfoState] = React.useState(\"null\")\r\n    const [startBlock, setStartBlock] = React.useState(null)\r\n    const [endBlock, setEndBlock] = React.useState(null)\r\n    const [offering, setOffering] = React.useState(null)\r\n    const [raising, setRaising] = React.useState(null)\r\n    const [raised, setRaised] = React.useState(null)\r\n    const [symbolo, setSymbolo] = React.useState(null)\r\n    const [symbolr, setSymbolr] = React.useState(null)\r\n    const [allocation, setAllocation] = React.useState(null)\r\n    const [claim, setClaim] = React.useState(null)\r\n    const [deposit, setDeposit] = React.useState(0)\r\n    const [maxDeposit, setMaxDeposit] = React.useState(0)\r\n\r\n    React.useEffect(() => {\r\n        setTimeout(update, 1000)\r\n        const interval = setInterval(update, 10000)\r\n        return () => clearInterval(interval);\r\n    }, [])\r\n\r\n    const update = async () => {\r\n        if (Provider == null) {\r\n            setState(\"init\")\r\n            return\r\n        }\r\n\r\n        // if (ChainID !== chain) {\r\n        //     setState(\"wrong_id\")\r\n        //     return\r\n        // }\r\n\r\n        setState(\"ready\")\r\n        \r\n        const contract = new ethers.Contract(address, abi, Provider)\r\n        const tokeno = new ethers.Contract(addresso, tokenAbi, Provider)\r\n        const tokenr = new ethers.Contract(addressr, tokenAbi, Provider)\r\n        \r\n        // Set dates from start and end blocks\r\n        const startBlock = parseInt(await contract.startBlock())\r\n        const endBlock = parseInt(await contract.endBlock())\r\n        setStartBlock(await blockToDate(startBlock))\r\n        setEndBlock(await blockToDate(endBlock))\r\n        \r\n        // Get Allocation\r\n        try {\r\n            const alloc = await contract.getAmount(Address)\r\n            setAllocation(ethers.utils.formatEther(alloc))\r\n        } catch(error) {\r\n            setAllocation(0)\r\n        }\r\n        \r\n        // Get token symbols\r\n        const so = await tokeno.symbol()\r\n        const sr = await tokenr.symbol()\r\n        setSymbolo(so)\r\n        setSymbolr(sr)\r\n\r\n        // Set raising and offering\r\n        const r = ethers.utils.formatEther(await contract.raisingAmount())\r\n        setRaising(r + \" \" + sr)\r\n        setOffering(ethers.utils.formatEther(await contract.offeringAmount()) + \" \" + so)\r\n        \r\n        // Calculate the raised percentage\r\n        const total = ethers.utils.formatEther(await contract.totalAmount())\r\n        setRaised((parseFloat(total) / parseFloat(r)) * 100)\r\n\r\n        // Check if IFO has yet to start, it's in progress, or finished\r\n        const currentBlock = await Provider.getBlockNumber()\r\n        if (currentBlock < startBlock) {\r\n            setIfoState(\"waiting\")\r\n            return\r\n        } else if (currentBlock >= endBlock - 1) {\r\n            setIfoState(\"finished\")\r\n            \r\n            const harvest = await contract.hasHarvest(Address)\r\n            if (harvest === true) {\r\n                setClaim(null)\r\n                return\r\n            }\r\n\r\n            // Check claim\r\n            try {\r\n                setClaim(ethers.utils.formatEther(await contract.getOfferingAmount(Address)))\r\n            } catch(error) {\r\n                setClaim(0)\r\n            }\r\n\r\n            return\r\n        }\r\n        \r\n        // Check raising token approval\r\n        const allowance = parseInt(await tokenr.allowance(Address, address))\r\n\r\n        if (allowance <= 0) {\r\n            setIfoState(\"approval\")\r\n            return\r\n        }\r\n\r\n        setMaxDeposit(parseFloat(ethers.utils.formatEther(await tokenr.balanceOf(Address))))\r\n\r\n        setIfoState(\"approved\")\r\n    }\r\n\r\n    const approve = async () => {\r\n        const tokenr = new ethers.Contract(addressr, tokenAbi, Signer)\r\n        tokenr.approve(address, \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\")\r\n    }\r\n    \r\n    const makeDeposit = async () => {\r\n        const contract = new ethers.Contract(address, abi, Signer)\r\n        const t = ethers.utils.parseEther(deposit.toString())\r\n        contract.deposit(t)\r\n    }\r\n\r\n    const makeClaim = async () => {\r\n        const contract = new ethers.Contract(address, abi, Signer)\r\n        contract.harvest()\r\n    }\r\n\r\n    const ifo = () => {\r\n        if (state !== \"ready\") return\r\n        if (ifoState === \"null\") {\r\n            return <Skeleton variant=\"rect\" width=\"90%\" height=\"10%\"/>\r\n        } else if (ifoState === \"waiting\") {\r\n            return <Typography mb=\"8px\" variant=\"h5\">Not yet started</Typography>\r\n        } else if (ifoState === \"finished\") {\r\n            return <Stack width=\"100%\" direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\r\n                <Typography variant=\"h5\">IFO finished</Typography>\r\n                {claim !== null ?\r\n                    <ColorButton sx={{mr: \"8px\", mb: \"8px\", mt: \"8px\"}} onClick={makeClaim} size=\"small\" variant=\"outlined\">Claim {claim} {symbolo}</ColorButton>\r\n                    : null\r\n                }\r\n            </Stack>\r\n        } else if (ifoState === \"approval\") {\r\n            return <ColorButton sx={{marginTop: \"8px\", marginBottom: \"8px\"}} onClick={approve} size=\"small\" variant=\"outlined\">Approve {symbolr}</ColorButton>\r\n        } else if (ifoState === \"approved\") {\r\n            return <NumberField value={deposit} setValue={setDeposit} maxValue={maxDeposit} click={makeDeposit} label=\"Deposit\"/>\r\n        }\r\n    }\r\n\r\n    const content = () => {\r\n        if (state === \"null\") {\r\n            return <Skeleton variant=\"rect\" width=\"90%\" height=\"25%\"/>\r\n        } else if (state === \"init\") {\r\n            return <Typography variant=\"h5\">Please connect wallet</Typography>\r\n        } else if (state === \"wrong_id\") {\r\n            return <Typography variant=\"h5\">Incorrect Network</Typography>\r\n        } else if (state === \"ready\") {\r\n            return <Stack width=\"100%\" direction=\"column\">\r\n                <LoadingRow label=\"Launch Time\" value={startBlock}/>\r\n                <LoadingRow label=\"End Time\" value={endBlock}/>\r\n                <LoadingRow label=\"For Sale\" value={offering}/>\r\n                <LoadingRow label=\"To Raise\" value={raising}/>\r\n                <LoadingRow label=\"Total Raised\" value={raised} suffix=\"%\"/>\r\n                <LoadingRow label=\"Your Deposit\" value={allocation} suffix={\" \" + symbolr}/>\r\n            </Stack>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ColorStack width={props.width} height={props.height} direction=\"column\" alignItems=\"center\" justifyContent=\"flex-start\">\r\n            <img style={{marginTop: \"8px\", marginBottom: \"8px\"}} width=\"50%\" src=\"logo512.png\" alt=\"\"/>\r\n            {ifo()}\r\n            {content()}\r\n            <Typography color=\"yellow\" align=\"justify\" mt=\"8px\" ml=\"8px\" mr=\"8px\" mb=\"8px\" variant=\"body1\">polyGAS Presale - Token Cost 1000 WMATIC per 1,000,000,000 Tokens. Launch date is 9/3. Buying presale ensures you are paying no tax on tokens. 100% of funds added to initial liquidity.</Typography>\r\n        </ColorStack>\r\n    )\r\n\r\n}","import * as React from 'react';\r\nimport { Stack } from '@material-ui/core';\r\nimport MetamaskButton from '../ui/metamaskButton.js';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport IFO from '../ui/ifo.js';\r\n\r\nconst contracts = [\r\n    {\r\n        address: \"0x625e5b02734378402bb20e69dc8ca151b9d97970\",\r\n        //address: require('../contracts/VoteMaster.json').networks[137].address,\r\n        abi: require('../contracts/IFO.json').abi,\r\n        gasPrice: 1000000000,\r\n        gasLimit: null,\r\n        id: 137,\r\n        name: \"Polygon\",\r\n        url: \"/polygon\",\r\n        img: \"polygon-logo.svg\",\r\n        unit: \"MATIC\",\r\n        //scan: \"https://polygonscan.com/address/\" + require('../contracts/VoteMaster.json').networks[137].address,\r\n        scan: \"https://polygonscan.com/address/0x625e5b02734378402bb20e69dc8ca151b9d97970\",\r\n        rpc: \"https://rpc-mainnet.matic.quiknode.pro\"\r\n    },\r\n    // {\r\n    //     address: require('../contracts/VoteMaster.json').networks[56].address,\r\n    //     abi: require('../contracts/VoteMaster.json').abi,\r\n    //     gasPrice: 5000000000,\r\n    //     gasLimit: null,\r\n    //     id: 56,\r\n    //     name: \"BSC\",\r\n    //     url: \"/bsc\",\r\n    //     img: \"binance-logo.svg\",\r\n    //     unit: \"BNB\",\r\n    //     scan: \"https://bscscan.com/address/\" + require('../contracts/VoteMaster.json').networks[56].address,\r\n    //     rpc: \"https://bsc-dataseed.binance.org\"\r\n    // },\r\n    // {\r\n    //     address: require('../contracts/IFO.json').networks[5777].address,\r\n    //     abi: require('../contracts/IFO.json').abi,\r\n    //     gasPrice: 10000000000,\r\n    //     gasLimit: 2000000,\r\n    //     id: 1337,\r\n    //     name: \"Localhost\",\r\n    //     url: \"/local\",\r\n    //     img: \"logo192.png\",\r\n    //     unit: \"ETH\",\r\n    //     scan: \"NO\"\r\n    // },\r\n]\r\n\r\nexport default function IfoPage(props) {\r\n    const isPortrait = useMediaQuery({ query: '(orientation: portrait)' })\r\n    \r\n    React.useEffect(() => { })\r\n\r\n    return (\r\n        <Stack backgroundColor=\"#191919\" minHeight=\"100%\" direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\r\n            <Stack minHeight=\"100%\" direction=\"row\" alignItems=\"center\" justifyContent=\"center\">\r\n                <div style={{width: \"170px\"}}/>\r\n                <img style={{marginTop: \"8px\", marginBottom: \"8px\"}} width=\"350px\" src=\"twitter.png\" alt=\"\"/>\r\n                <MetamaskButton \r\n                    style={{marginBottom: \"10px\", width: \"170px\"}}\r\n                    name={contracts[parseInt(0)].name}\r\n                    id={contracts[parseInt(0)].id}\r\n                    rpc={contracts[parseInt(0)].rpc}\r\n                />\r\n            </Stack>\r\n            \r\n            <IFO width=\"300px\"/>\r\n        </Stack>\r\n    );\r\n}","import \"./App.css\";\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AboutPage from \"./pages/aboutPage.js\";\nimport { GreenColor, YellowColor } from \"./ui/widgets\";\nimport IfoPage from \"./pages/ifoPage\";\n\n\nclass App extends Component {\n\n  componentDidMount = async () => { };\n\n  theme = createMuiTheme({\n    palette: {\n      mode: \"dark\",\n      primary: {\n        main: GreenColor,\n      },\n      secondary: {\n        main: YellowColor,\n      },\n    }\n  })\n\n  render() {\n    return (\n      <ThemeProvider theme={this.theme}>\n        <CssBaseline/>\n        <Router>\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/polygon\" />\n            {/* <Route path=\"/polygon\">\n              <AboutPage id=\"0\"/>\n            </Route>\n            <Route path=\"/bsc\">\n              <AboutPage id=\"1\"/>\n            </Route> */}\n            <Route path=\"/polygon\">\n              {/* <AboutPage id=\"0\"/> */}\n              <IfoPage/>\n            </Route>\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}